#include "simple_vector.h"

// Tests
#include "tests.h"

int main() {
    Test1();
    SimpleVector<int> v({1,2,3,4,5});
    v.PushBack(6);
    
    SimpleVector<int> x(v);
    return 0;
}

/*
Задание Part 1 (урок 10)

 -Разработайте шаблонный класс SimpleVector<Type>, который будет упрощённым аналогом контейнера vector, со следующим функционалом:
Конструкторы.
По умолчанию. Создаёт пустой вектор с нулевой вместимостью. Не выделяет динамическую память и не выбрасывает исключений.
  
 -Вектор должен иметь одинаковые размер и вместимость. Если размер нулевой, динамическая память для его элементов выделяться не должна.
 -Конструктор из std::initializer_list. Элементы вектора должны содержать копию элементов initializer_list. Имеет размер и вместимость, совпадающую с размерами и вместимостью переданного initializer_list.
 -Метод GetSize для получения количества элементов в векторе. Не выбрасывает исключений.
 -Метод GetCapacity для получения вместимости вектора. Не выбрасывает исключений.
 -Метод IsEmpty, сообщающий, пуст ли вектор. Не выбрасывает исключений.
 -Оператор [] для доступа к элементу вектора по его индексу. Имеет две версии — константную и неконстантную. Не выбрасывает исключений. Для корректной работы оператора индекс элемента массива не должен выходить за пределы массива.
 -Метод At для доступа к элементу вектора по его индексу, аналог метода at класса vector. В случае выхода индекса за пределы массива должен выбросить исключение std::out_of_range.
 -Метод Clear для очистки массива без изменения его вместимости. Не выбрасывает исключений.
 -Метод Resize для изменения количества элементов в массиве. Метод должен предоставлять строгую гарантию безопасности исключений.
 -Методы begin, end, cbegin и cend, возвращающие итераторы на начало и конец массива. В качестве итераторов используйте указатели. Эти методы должны быть объявлены со спецификатором noexcept. В противном случае тренажёр отклонит ваше решение.
 -При разрушении вектора должна освобождаться память, занимаемая его элементами.

Ограничения

Гарантируется, что тренажёр при проверке решения не будет передавать в оператор [] индексы, выходящие за границы массива. При написании  SimpleVector реализуйте самостоятельно работу с массивом в динамической памяти. Чтобы упростить управление массивом, пригодится разработанный в предыдущем спринте шаблонный класс ArrayPtr.

 Задание Part 2 (Урок 11)

 Реализуйте в классе SimpleVector следующие операции:
 Конструктор копирования. Копия вектора должна иметь вместимость, достаточную для хранения копии элементов исходного вектора.
 Оператор присваивания. Должен обеспечивать строгую гарантию безопасности исключений.
 Метод PushBack, добавляющий элемент в конец вектора. Должен обеспечивать строгую гарантию безопасности исключений.
 Метод PopBack, удаляющий последний элемент вектора. Не выбрасывает исключений.
 Метод Insert, вставляющий элемент в произвольное место контейнера. Обеспечивает базовую гарантию безопасности исключений.
 Метод Erase, удаляющий элемент в произвольной позиции вектора. Обеспечивает базовую гарантию безопасности исключений.
 Метод swap, обменивающий содержимое вектора с другим вектором. Не выбрасывает исключений, имеет время выполнения O(1).
 Операторы == и !=. Два вектора равны, если их размеры равны и содержат равные элементы. Равенство вместимости не требуется.
 Операторы <, >, <=, >=, выполняющие лексикографическое сравнение содержимого двух векторов.
 Сигнатура новых методов:
 
 */
